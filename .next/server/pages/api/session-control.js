"use strict";(()=>{var e={};e.id=353,e.ids=[353],e.modules={1944:(e,s,o)=>{o.r(s),o.d(s,{config:()=>P,default:()=>m,routeModule:()=>h});var t={};o.r(t),o.d(t,{default:()=>g});var r=o(3480),n=o(8667),l=o(6435);let{exec:i,spawn:c}=o(9646),p=o(3873),a=o(9021),u=!1,d=null,f=null;function g(e,s){if(s.setHeader("Access-Control-Allow-Origin","*"),s.setHeader("Access-Control-Allow-Methods","POST, GET, OPTIONS"),s.setHeader("Access-Control-Allow-Headers","Content-Type"),"OPTIONS"===e.method)return s.status(200).end();if("POST"!==e.method)return s.status(405).json({error:"Method not allowed"});let{action:o,port:t,baud:r}=e.body;if("start"===o){if(u)return s.status(400).json({success:!1,error:`Session is already running on ${f}`});if(!t||!t.match(/^COM\d+$/i))return s.status(400).json({success:!1,error:"Invalid COM port format. Please use format like COM3, COM7, etc."});let e=r||115200,o=[9600,19200,38400,57600,115200];if(!o.includes(parseInt(e)))return s.status(400).json({success:!1,error:`Invalid baud rate: ${e}. Valid rates: ${o.join(", ")}`});let n=p.join(process.cwd(),"components"),l=p.join(n,"esp.py");if(!a.existsSync(l))return s.status(500).json({success:!1,error:`Python script not found at: ${l}. Please ensure esp.py is in the components directory.`});let g="win32"===process.platform?'python -c "import serial.tools.list_ports; ports = list(serial.tools.list_ports.comports()); print([p.device for p in ports])"':'python3 -c "import serial.tools.list_ports; ports = list(serial.tools.list_ports.comports()); print([p.device for p in ports])"';console.log("Checking available COM ports..."),i(g,(e,s,o)=>{e?console.error("Failed to check COM ports:",e):console.log("Available COM ports:",s.trim())});let m="win32"===process.platform?"python":"python3";console.log("Executing command:",`${m} esp.py ${t.toUpperCase()} --baud ${e}`),console.log("Working directory:",n);try{if(!(d=c(m,["esp.py",t.toUpperCase(),"--baud",e.toString()],{cwd:n,stdio:["pipe","pipe","pipe"],env:{...process.env,PYTHONIOENCODING:"utf-8",PYTHONUNBUFFERED:"1"}})))return s.status(500).json({success:!1,error:"Failed to create Python process"});return u=!0,f=t.toUpperCase(),console.log(`Python script started with PID: ${d.pid}`),console.log(`Monitoring ${f} at ${e} baud`),d.stdout.on("data",e=>{let s=e.toString().trim();s&&console.log(`[Python STDOUT]: ${s}`)}),d.stderr.on("data",e=>{let s=e.toString().trim();!s||s.includes("WARNING")||s.includes("INFO")||console.error(`[Python STDERR]: ${s}`)}),d.on("error",e=>{console.error("Python process error:",e),u=!1,d=null,f=null}),d.on("exit",(e,s)=>{console.log(`Python process exited with code: ${e}, signal: ${s}`),u=!1,d=null,f=null}),d.on("close",(e,s)=>{console.log(`Python process closed with code: ${e}, signal: ${s}`),u=!1,d=null,f=null}),s.status(200).json({success:!0,message:`Python script started successfully on ${f} at ${e} baud`,pid:d.pid,port:f,baud:e})}catch(e){return console.error("Failed to start Python script:",e),u=!1,d=null,f=null,s.status(500).json({success:!1,error:`Failed to start Python script: ${e.message}`})}}if("stop"===o){if(!u&&!d)return s.status(400).json({success:!1,error:"No session is currently running"});console.log(`Stopping Python script (PID: ${d?.pid})...`);try{d&&("win32"===process.platform?i(`taskkill /pid ${d.pid} /t`,e=>{e?(console.log("Graceful shutdown failed, forcing termination..."),i(`taskkill /pid ${d.pid} /t /f`,e=>{e?(console.error("Force kill also failed:",e),i("wmic process where \"commandline like '%esp.py%'\" delete",e=>{e?console.error("Fallback kill error:",e):console.log("Fallback: Killed all esp.py processes")})):console.log("Process force killed successfully")})):console.log("Process terminated gracefully")}):(d.kill("SIGTERM"),setTimeout(()=>{d&&!d.killed&&(console.log("Graceful shutdown failed, sending SIGKILL..."),d.kill("SIGKILL"))},3e3)));let e="win32"===process.platform?'taskkill /f /im python.exe /fi "WINDOWTITLE eq esp.py*"':"pkill -f esp.py";i(e,e=>{e?console.log("No additional Python processes found to kill"):console.log("Additional Python processes terminated")}),u=!1;let o=f;return d=null,f=null,s.status(200).json({success:!0,message:`Python script stopped successfully. Port ${o} is now available.`})}catch(e){return console.error("Error during shutdown:",e),u=!1,d=null,f=null,s.status(500).json({success:!1,error:`Failed to stop session: ${e.message}`})}}if("status"===o)return s.status(200).json({success:!0,running:u,pid:d?d.pid:null,port:f,uptime:u?process.uptime():0});if("list-ports"!==o)return s.status(400).json({success:!1,error:'Invalid action. Use "start", "stop", "status", or "list-ports"'});i("win32"===process.platform?"python -c \"import serial.tools.list_ports; ports = list(serial.tools.list_ports.comports()); [print(f'{p.device}: {p.description}') for p in ports]\"":"python3 -c \"import serial.tools.list_ports; ports = list(serial.tools.list_ports.comports()); [print(f'{p.device}: {p.description}') for p in ports]\"",(e,o,t)=>{if(e)return s.status(500).json({success:!1,error:`Failed to list COM ports: ${e.message}`});let r=o.trim().split("\n").filter(e=>e.length>0).map(e=>{let[s,...o]=e.split(": ");return{device:s.trim(),description:o.join(": ").trim()}});return s.status(200).json({success:!0,ports:r})})}process.on("exit",()=>{if(d)try{console.log("Cleaning up on exit..."),"win32"===process.platform?i(`taskkill /pid ${d.pid} /t /f`):d.kill("SIGKILL")}catch(e){console.error("Error during exit cleanup:",e)}}),process.on("SIGINT",()=>{if(console.log("Received SIGINT, cleaning up..."),d)try{"win32"===process.platform?i(`taskkill /pid ${d.pid} /t /f`):d.kill("SIGTERM")}catch(e){console.error("Error during SIGINT cleanup:",e)}process.exit()}),process.on("SIGTERM",()=>{if(console.log("Received SIGTERM, cleaning up..."),d)try{"win32"===process.platform?i(`taskkill /pid ${d.pid} /t /f`):d.kill("SIGTERM")}catch(e){console.error("Error during SIGTERM cleanup:",e)}process.exit()});let m=(0,l.M)(t,"default"),P=(0,l.M)(t,"config"),h=new r.PagesAPIRouteModule({definition:{kind:n.A.PAGES_API,page:"/api/session-control",pathname:"/api/session-control",bundlePath:"",filename:""},userland:t})},3480:(e,s,o)=>{e.exports=o(5600)},3873:e=>{e.exports=require("path")},5600:e=>{e.exports=require("next/dist/compiled/next-server/pages-api.runtime.prod.js")},6435:(e,s)=>{Object.defineProperty(s,"M",{enumerable:!0,get:function(){return function e(s,o){return o in s?s[o]:"then"in s&&"function"==typeof s.then?s.then(s=>e(s,o)):"function"==typeof s&&"default"===o?s:void 0}}})},8667:(e,s)=>{Object.defineProperty(s,"A",{enumerable:!0,get:function(){return o}});var o=function(e){return e.PAGES="PAGES",e.PAGES_API="PAGES_API",e.APP_PAGE="APP_PAGE",e.APP_ROUTE="APP_ROUTE",e.IMAGE="IMAGE",e}({})},9021:e=>{e.exports=require("fs")},9646:e=>{e.exports=require("child_process")}};var s=require("../../webpack-api-runtime.js");s.C(e);var o=s(s.s=1944);module.exports=o})();